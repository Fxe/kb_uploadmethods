# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class kb_uploadmethods(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def upload_fastq_file(self, inputParamUploadFile, context=None):
        """
        :param inputParamUploadFile: instance of type "inputParamUploadFile"
           -> structure: parameter "workspace_name" of type "workspace_name"
           (workspace name of the object), parameter "fastq_file_path" of
           type "fastq_file_path" (input and output file path/url) -> list of
           String, parameter "secondary_fastq_file_path" of type
           "secondary_fastq_file_path" -> list of String, parameter
           "reads_file_name" of type "reads_file_name"
        :returns: instance of type "outParam" -> structure: parameter
           "uploaded" of type "uploaded" (indicates true or false values,
           false <= 0, true >=1)
        """
        return self._client.call_method(
            'kb_uploadmethods.upload_fastq_file',
            [inputParamUploadFile], self._service_ver, context)

    def upload_fastq_url(self, inputParamUploadURL, context=None):
        """
        :param inputParamUploadURL: instance of type "inputParamUploadURL" ->
           structure: parameter "workspace_name" of type "workspace_name"
           (workspace name of the object), parameter "fastq_file_url" of type
           "fastq_file_url", parameter "secondary_fastq_file_url" of type
           "secondary_fastq_file_url", parameter "reads_file_name" of type
           "reads_file_name"
        :returns: instance of type "outParam" -> structure: parameter
           "uploaded" of type "uploaded" (indicates true or false values,
           false <= 0, true >=1)
        """
        return self._client.call_method(
            'kb_uploadmethods.upload_fastq_url',
            [inputParamUploadURL], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('kb_uploadmethods.status',
                                        [], self._service_ver, context)
