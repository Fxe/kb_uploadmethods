# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class kb_uploadmethods(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def upload_fastq_file(self, params, context=None):
        """
        :param params: instance of type "UploadMethodParams"
           (sequencing_tech: sequencing technology name: output reads file
           name workspace_name: workspace name/ID of the object For files in
           user's staging area: fwd_staging_file_name: single-end fastq file
           name or forward/left paired-end fastq file name from user's
           staging area rev_staging_file_name: reverse/right paired-end fastq
           file name user's staging area For files from web: download_type:
           download type for web source fastq file ('Direct Download', 'FTP',
           'DropBox', 'Google Drive') fwd_file_url: single-end fastq file URL
           or forward/left paired-end fastq file URL rev_file_url:
           reverse/right paired-end fastq file URL urls_to_add: used for
           parameter-groups. dict of {fwd_file_url, rev_file_url, name}) ->
           structure: parameter "workspace_name" of type "workspace_name"
           (workspace name of the object), parameter "fwd_staging_file_name"
           of type "fwd_staging_file_name" (input and output file path/url),
           parameter "rev_staging_file_name" of type "rev_staging_file_name",
           parameter "download_type" of type "download_type", parameter
           "fwd_file_url" of type "fwd_file_url", parameter "rev_file_url" of
           type "rev_file_url", parameter "sequencing_tech" of type
           "sequencing_tech", parameter "name" of type "name", parameter
           "urls_to_add" of type "urls_to_add" -> structure: parameter
           "fwd_file_url" of type "fwd_file_url", parameter "rev_file_url" of
           type "rev_file_url", parameter "name" of type "name"
        :returns: instance of type "UploadMethodResult" -> structure:
           parameter "obj_ref" of type "obj_ref"
        """
        return self._client.call_method(
            'kb_uploadmethods.upload_fastq_file',
            [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('kb_uploadmethods.status',
                                        [], self._service_ver, context)
