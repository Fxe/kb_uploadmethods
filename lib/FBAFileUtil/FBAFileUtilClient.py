# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport
import time


class FBAFileUtil(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login',
            service_ver='release',
            async_job_check_time_ms=100, async_job_check_time_scale_percent=150, 
            async_job_check_max_time_ms=300000):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = service_ver
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc,
            async_job_check_time_ms=async_job_check_time_ms,
            async_job_check_time_scale_percent=async_job_check_time_scale_percent,
            async_job_check_max_time_ms=async_job_check_max_time_ms)

    def _check_job(self, job_id):
        return self._client._check_job('FBAFileUtil', job_id)

    def _excel_file_to_model_submit(self, p, context=None):
        return self._client._submit_job(
             'FBAFileUtil.excel_file_to_model', [p],
             self._service_ver, context)

    def excel_file_to_model(self, p, context=None):
        """
        :param p: instance of type "ModelCreationParams" (compounds_file is
           not used for excel file creations) -> structure: parameter
           "model_file" of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String, parameter "model_name" of
           String, parameter "workspace_name" of String, parameter "genome"
           of String, parameter "biomass" of list of String, parameter
           "compounds_file" of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String
        :returns: instance of type "WorkspaceRef" -> structure: parameter
           "ref" of String
        """
        job_id = self._excel_file_to_model_submit(p, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _sbml_file_to_model_submit(self, p, context=None):
        return self._client._submit_job(
             'FBAFileUtil.sbml_file_to_model', [p],
             self._service_ver, context)

    def sbml_file_to_model(self, p, context=None):
        """
        :param p: instance of type "ModelCreationParams" (compounds_file is
           not used for excel file creations) -> structure: parameter
           "model_file" of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String, parameter "model_name" of
           String, parameter "workspace_name" of String, parameter "genome"
           of String, parameter "biomass" of list of String, parameter
           "compounds_file" of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String
        :returns: instance of type "WorkspaceRef" -> structure: parameter
           "ref" of String
        """
        job_id = self._sbml_file_to_model_submit(p, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _tsv_file_to_model_submit(self, p, context=None):
        return self._client._submit_job(
             'FBAFileUtil.tsv_file_to_model', [p],
             self._service_ver, context)

    def tsv_file_to_model(self, p, context=None):
        """
        :param p: instance of type "ModelCreationParams" (compounds_file is
           not used for excel file creations) -> structure: parameter
           "model_file" of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String, parameter "model_name" of
           String, parameter "workspace_name" of String, parameter "genome"
           of String, parameter "biomass" of list of String, parameter
           "compounds_file" of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String
        :returns: instance of type "WorkspaceRef" -> structure: parameter
           "ref" of String
        """
        job_id = self._tsv_file_to_model_submit(p, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _model_to_excel_file_submit(self, model, context=None):
        return self._client._submit_job(
             'FBAFileUtil.model_to_excel_file', [model],
             self._service_ver, context)

    def model_to_excel_file(self, model, context=None):
        """
        :param model: instance of type "ModelObjectSelectionParams" ->
           structure: parameter "workspace_name" of String, parameter
           "model_name" of String, parameter "save_to_shock" of type
           "boolean" (A boolean - 0 for false, 1 for true. @range (0, 1))
        :returns: instance of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String
        """
        job_id = self._model_to_excel_file_submit(model, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _model_to_sbml_file_submit(self, model, context=None):
        return self._client._submit_job(
             'FBAFileUtil.model_to_sbml_file', [model],
             self._service_ver, context)

    def model_to_sbml_file(self, model, context=None):
        """
        :param model: instance of type "ModelObjectSelectionParams" ->
           structure: parameter "workspace_name" of String, parameter
           "model_name" of String, parameter "save_to_shock" of type
           "boolean" (A boolean - 0 for false, 1 for true. @range (0, 1))
        :returns: instance of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String
        """
        job_id = self._model_to_sbml_file_submit(model, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _model_to_tsv_file_submit(self, model, context=None):
        return self._client._submit_job(
             'FBAFileUtil.model_to_tsv_file', [model],
             self._service_ver, context)

    def model_to_tsv_file(self, model, context=None):
        """
        :param model: instance of type "ModelObjectSelectionParams" ->
           structure: parameter "workspace_name" of String, parameter
           "model_name" of String, parameter "save_to_shock" of type
           "boolean" (A boolean - 0 for false, 1 for true. @range (0, 1))
        :returns: instance of type "ModelTsvFiles" -> structure: parameter
           "compounds_file" of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String, parameter "reactions_file"
           of type "File" -> structure: parameter "path" of String, parameter
           "shock_id" of String
        """
        job_id = self._model_to_tsv_file_submit(model, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _export_model_as_excel_file_submit(self, params, context=None):
        return self._client._submit_job(
             'FBAFileUtil.export_model_as_excel_file', [params],
             self._service_ver, context)

    def export_model_as_excel_file(self, params, context=None):
        """
        :param params: instance of type "ExportParams" (input and output
           structure functions for standard downloaders) -> structure:
           parameter "input_ref" of String
        :returns: instance of type "ExportOutput" -> structure: parameter
           "shock_id" of String
        """
        job_id = self._export_model_as_excel_file_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _export_model_as_tsv_file_submit(self, params, context=None):
        return self._client._submit_job(
             'FBAFileUtil.export_model_as_tsv_file', [params],
             self._service_ver, context)

    def export_model_as_tsv_file(self, params, context=None):
        """
        :param params: instance of type "ExportParams" (input and output
           structure functions for standard downloaders) -> structure:
           parameter "input_ref" of String
        :returns: instance of type "ExportOutput" -> structure: parameter
           "shock_id" of String
        """
        job_id = self._export_model_as_tsv_file_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _export_model_as_sbml_file_submit(self, params, context=None):
        return self._client._submit_job(
             'FBAFileUtil.export_model_as_sbml_file', [params],
             self._service_ver, context)

    def export_model_as_sbml_file(self, params, context=None):
        """
        :param params: instance of type "ExportParams" (input and output
           structure functions for standard downloaders) -> structure:
           parameter "input_ref" of String
        :returns: instance of type "ExportOutput" -> structure: parameter
           "shock_id" of String
        """
        job_id = self._export_model_as_sbml_file_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _fba_to_excel_file_submit(self, fba, context=None):
        return self._client._submit_job(
             'FBAFileUtil.fba_to_excel_file', [fba],
             self._service_ver, context)

    def fba_to_excel_file(self, fba, context=None):
        """
        :param fba: instance of type "FBAObjectSelectionParams" (****** FBA
           Result Converters ******) -> structure: parameter "workspace_name"
           of String, parameter "fba_name" of String, parameter
           "save_to_shock" of type "boolean" (A boolean - 0 for false, 1 for
           true. @range (0, 1))
        :returns: instance of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String
        """
        job_id = self._fba_to_excel_file_submit(fba, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _fba_to_tsv_file_submit(self, fba, context=None):
        return self._client._submit_job(
             'FBAFileUtil.fba_to_tsv_file', [fba],
             self._service_ver, context)

    def fba_to_tsv_file(self, fba, context=None):
        """
        :param fba: instance of type "FBAObjectSelectionParams" (****** FBA
           Result Converters ******) -> structure: parameter "workspace_name"
           of String, parameter "fba_name" of String, parameter
           "save_to_shock" of type "boolean" (A boolean - 0 for false, 1 for
           true. @range (0, 1))
        :returns: instance of type "FBATsvFiles" -> structure: parameter
           "compounds_file" of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String, parameter "reactions_file"
           of type "File" -> structure: parameter "path" of String, parameter
           "shock_id" of String
        """
        job_id = self._fba_to_tsv_file_submit(fba, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _export_fba_as_excel_file_submit(self, params, context=None):
        return self._client._submit_job(
             'FBAFileUtil.export_fba_as_excel_file', [params],
             self._service_ver, context)

    def export_fba_as_excel_file(self, params, context=None):
        """
        :param params: instance of type "ExportParams" (input and output
           structure functions for standard downloaders) -> structure:
           parameter "input_ref" of String
        :returns: instance of type "ExportOutput" -> structure: parameter
           "shock_id" of String
        """
        job_id = self._export_fba_as_excel_file_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _export_fba_as_tsv_file_submit(self, params, context=None):
        return self._client._submit_job(
             'FBAFileUtil.export_fba_as_tsv_file', [params],
             self._service_ver, context)

    def export_fba_as_tsv_file(self, params, context=None):
        """
        :param params: instance of type "ExportParams" (input and output
           structure functions for standard downloaders) -> structure:
           parameter "input_ref" of String
        :returns: instance of type "ExportOutput" -> structure: parameter
           "shock_id" of String
        """
        job_id = self._export_fba_as_tsv_file_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _tsv_file_to_media_submit(self, p, context=None):
        return self._client._submit_job(
             'FBAFileUtil.tsv_file_to_media', [p],
             self._service_ver, context)

    def tsv_file_to_media(self, p, context=None):
        """
        :param p: instance of type "MediaCreationParams" (****** Media
           Converters *********) -> structure: parameter "media_file" of type
           "File" -> structure: parameter "path" of String, parameter
           "shock_id" of String, parameter "media_name" of String, parameter
           "workspace_name" of String
        :returns: instance of type "WorkspaceRef" -> structure: parameter
           "ref" of String
        """
        job_id = self._tsv_file_to_media_submit(p, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _excel_file_to_media_submit(self, p, context=None):
        return self._client._submit_job(
             'FBAFileUtil.excel_file_to_media', [p],
             self._service_ver, context)

    def excel_file_to_media(self, p, context=None):
        """
        :param p: instance of type "MediaCreationParams" (****** Media
           Converters *********) -> structure: parameter "media_file" of type
           "File" -> structure: parameter "path" of String, parameter
           "shock_id" of String, parameter "media_name" of String, parameter
           "workspace_name" of String
        :returns: instance of type "WorkspaceRef" -> structure: parameter
           "ref" of String
        """
        job_id = self._excel_file_to_media_submit(p, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _media_to_tsv_file_submit(self, media, context=None):
        return self._client._submit_job(
             'FBAFileUtil.media_to_tsv_file', [media],
             self._service_ver, context)

    def media_to_tsv_file(self, media, context=None):
        """
        :param media: instance of type "MediaObjectSelectionParams" ->
           structure: parameter "workspace_name" of String, parameter
           "media_name" of String, parameter "save_to_shock" of type
           "boolean" (A boolean - 0 for false, 1 for true. @range (0, 1))
        :returns: instance of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String
        """
        job_id = self._media_to_tsv_file_submit(media, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _media_to_excel_file_submit(self, media, context=None):
        return self._client._submit_job(
             'FBAFileUtil.media_to_excel_file', [media],
             self._service_ver, context)

    def media_to_excel_file(self, media, context=None):
        """
        :param media: instance of type "MediaObjectSelectionParams" ->
           structure: parameter "workspace_name" of String, parameter
           "media_name" of String, parameter "save_to_shock" of type
           "boolean" (A boolean - 0 for false, 1 for true. @range (0, 1))
        :returns: instance of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String
        """
        job_id = self._media_to_excel_file_submit(media, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _export_media_as_excel_file_submit(self, params, context=None):
        return self._client._submit_job(
             'FBAFileUtil.export_media_as_excel_file', [params],
             self._service_ver, context)

    def export_media_as_excel_file(self, params, context=None):
        """
        :param params: instance of type "ExportParams" (input and output
           structure functions for standard downloaders) -> structure:
           parameter "input_ref" of String
        :returns: instance of type "ExportOutput" -> structure: parameter
           "shock_id" of String
        """
        job_id = self._export_media_as_excel_file_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _export_media_as_tsv_file_submit(self, params, context=None):
        return self._client._submit_job(
             'FBAFileUtil.export_media_as_tsv_file', [params],
             self._service_ver, context)

    def export_media_as_tsv_file(self, params, context=None):
        """
        :param params: instance of type "ExportParams" (input and output
           structure functions for standard downloaders) -> structure:
           parameter "input_ref" of String
        :returns: instance of type "ExportOutput" -> structure: parameter
           "shock_id" of String
        """
        job_id = self._export_media_as_tsv_file_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _tsv_file_to_phenotype_set_submit(self, p, context=None):
        return self._client._submit_job(
             'FBAFileUtil.tsv_file_to_phenotype_set', [p],
             self._service_ver, context)

    def tsv_file_to_phenotype_set(self, p, context=None):
        """
        :param p: instance of type "PhenotypeSetCreationParams" (******
           Phenotype Data Converters *******) -> structure: parameter
           "phenotype_set_file" of type "File" -> structure: parameter "path"
           of String, parameter "shock_id" of String, parameter
           "phenotype_set_name" of String, parameter "workspace_name" of
           String, parameter "genome" of String
        :returns: instance of type "WorkspaceRef" -> structure: parameter
           "ref" of String
        """
        job_id = self._tsv_file_to_phenotype_set_submit(p, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _phenotype_set_to_tsv_file_submit(self, phenotype_set, context=None):
        return self._client._submit_job(
             'FBAFileUtil.phenotype_set_to_tsv_file', [phenotype_set],
             self._service_ver, context)

    def phenotype_set_to_tsv_file(self, phenotype_set, context=None):
        """
        :param phenotype_set: instance of type
           "PhenotypeSetObjectSelectionParams" -> structure: parameter
           "workspace_name" of String, parameter "phenotype_set_name" of
           String, parameter "save_to_shock" of type "boolean" (A boolean - 0
           for false, 1 for true. @range (0, 1))
        :returns: instance of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String
        """
        job_id = self._phenotype_set_to_tsv_file_submit(phenotype_set, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _export_phenotype_set_as_tsv_file_submit(self, params, context=None):
        return self._client._submit_job(
             'FBAFileUtil.export_phenotype_set_as_tsv_file', [params],
             self._service_ver, context)

    def export_phenotype_set_as_tsv_file(self, params, context=None):
        """
        :param params: instance of type "ExportParams" (input and output
           structure functions for standard downloaders) -> structure:
           parameter "input_ref" of String
        :returns: instance of type "ExportOutput" -> structure: parameter
           "shock_id" of String
        """
        job_id = self._export_phenotype_set_as_tsv_file_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _phenotype_simulation_set_to_excel_file_submit(self, pss, context=None):
        return self._client._submit_job(
             'FBAFileUtil.phenotype_simulation_set_to_excel_file', [pss],
             self._service_ver, context)

    def phenotype_simulation_set_to_excel_file(self, pss, context=None):
        """
        :param pss: instance of type
           "PhenotypeSimulationSetObjectSelectionParams" -> structure:
           parameter "workspace_name" of String, parameter
           "phenotype_simulation_set_name" of String, parameter
           "save_to_shock" of type "boolean" (A boolean - 0 for false, 1 for
           true. @range (0, 1))
        :returns: instance of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String
        """
        job_id = self._phenotype_simulation_set_to_excel_file_submit(pss, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _phenotype_simulation_set_to_tsv_file_submit(self, pss, context=None):
        return self._client._submit_job(
             'FBAFileUtil.phenotype_simulation_set_to_tsv_file', [pss],
             self._service_ver, context)

    def phenotype_simulation_set_to_tsv_file(self, pss, context=None):
        """
        :param pss: instance of type
           "PhenotypeSimulationSetObjectSelectionParams" -> structure:
           parameter "workspace_name" of String, parameter
           "phenotype_simulation_set_name" of String, parameter
           "save_to_shock" of type "boolean" (A boolean - 0 for false, 1 for
           true. @range (0, 1))
        :returns: instance of type "File" -> structure: parameter "path" of
           String, parameter "shock_id" of String
        """
        job_id = self._phenotype_simulation_set_to_tsv_file_submit(pss, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _export_phenotype_simulation_set_as_excel_file_submit(self, params, context=None):
        return self._client._submit_job(
             'FBAFileUtil.export_phenotype_simulation_set_as_excel_file', [params],
             self._service_ver, context)

    def export_phenotype_simulation_set_as_excel_file(self, params, context=None):
        """
        :param params: instance of type "ExportParams" (input and output
           structure functions for standard downloaders) -> structure:
           parameter "input_ref" of String
        :returns: instance of type "ExportOutput" -> structure: parameter
           "shock_id" of String
        """
        job_id = self._export_phenotype_simulation_set_as_excel_file_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def _export_phenotype_simulation_set_as_tsv_file_submit(self, params, context=None):
        return self._client._submit_job(
             'FBAFileUtil.export_phenotype_simulation_set_as_tsv_file', [params],
             self._service_ver, context)

    def export_phenotype_simulation_set_as_tsv_file(self, params, context=None):
        """
        :param params: instance of type "ExportParams" (input and output
           structure functions for standard downloaders) -> structure:
           parameter "input_ref" of String
        :returns: instance of type "ExportOutput" -> structure: parameter
           "shock_id" of String
        """
        job_id = self._export_phenotype_simulation_set_as_tsv_file_submit(params, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]

    def status(self, context=None):
        job_id = self._client._submit_job('FBAFileUtil.status', 
            [], self._service_ver, context)
        async_job_check_time = self._client.async_job_check_time
        while True:
            time.sleep(async_job_check_time)
            async_job_check_time = (async_job_check_time *
                self._client.async_job_check_time_scale_percent / 100.0)
            if async_job_check_time > self._client.async_job_check_max_time:
                async_job_check_time = self._client.async_job_check_max_time
            job_state = self._check_job(job_id)
            if job_state['finished']:
                return job_state['result'][0]
